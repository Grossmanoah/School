-----------------------------------Examples Setters

const person = {
  _age: 37,
  set age(newAge){
    if (typeof newAge === 'number'){
      this._age = newAge;
    } else {
      console.log('You must assign a number to age');
    }
  }
};






--------------------------------------------------------------Problem - Setters
//Currently, in robot there is a getter method for numOfSensors but no setter method! 
What if we need to add or remove some sensors? Let’s fix that problem.
Add a setter method named numOfSensors using the set keyword. 
Provide a parameter of num. Leave the function body empty for now.
There are a couple of things we should do in the setter method:
Add a check to see if num is a number using the typeof operator.
num should also be greater than or equal to 0.
If both conditions are met, reassign this._numOfSensors to num.
Now add an else that logs 'Pass in a number that is greater than or equal to 0' to the console.
Use the numOfSensors setter method on robot to assign _numOfSensors to 100.
To check that the setter method worked, console.log() robot.numOfSensors.

const robot = {
  _model: '1E78V2',
  _energyLevel: 100,
  _numOfSensors: 15,
  get numOfSensors(){
    if(typeof this._numOfSensors === 'number'){
      return this._numOfSensors;
    } else {
      return 'Sensors are currently down.'
    }
  },
  set numOfSensors(num) {
    if (typeof num === 'number' && num >= 0){
      this._numOfSensors = num;
    } else {
      console.log('Pass in a number that is greater than or equal to 0')
    }   
  } 
};

robot.numOfSensors = 100;
console.log(robot.numOfSensors);

------------------------------------------------------------Factory Functions


const robotFactory = (model, mobile) => {
  return {
    model : model,
		mobile: mobile,
		beep () { 
      console.log('Beep Boop'); 
    }
	};
};

const tinCan = robotFactory('P-500', true);
tinCan.beep();



//Instead of making individual robots like we’ve been doing, let’s make a factory function to make robots as we please!

Create a factory function named robotFactory that has two parameters model and mobile. Make the function return an object. In the object, add a key of model with the value of the model parameter. Add another property that has a key of mobile with a value of the mobile parameter.

Then add a method named beep without a parameter that will log 'Beep Boop' to the console.
Use your factory function by declaring a const variable named tinCan. Assign to tinCan the value of calling
robotFactory with the first argument of 'P-500' and the second argument of true.
Let’s now check what tinCan can do! Call .beep() on tinCan.
You should see 'Beep Boop' printed to the console which means the factory function produced a robot object! 
Play around with tinCan to check the other properties!



-----------------------------------------------------------------------Property Value Shorthand


BEFORE
function robotFactory(model, mobile){
  return {
    model: model,
    mobile: mobile,
    beep() {
      console.log('Beep Boop');
    }
  }
}

// To check that the property value shorthand technique worked:
const newRobot = robotFactory('P-501', false)
console.log(newRobot.model)
console.log(newRobot.mobile)

After:
