------------------------------------------------------------Dot Operator


let spaceship = {
  homePlanet: 'Earth',
  color: 'silver',
  'Fuel Type': 'Turbo Fuel',
  numCrew: 5,
  flightPath: ['Venus', 'Mars', 'Saturn']
};

// Write your code below

//Let’s use the dot operator to access the value of numCrew from the spaceship object in the code editor. Create a variable crewCount and assign the spaceship‘s numCrew property to it.
const crewCount = spaceship.numCrew;

//Again using the dot operator, create a variable planetArray and assign the spaceship‘s flightPath property to it.
const planetArray = spaceship.flightPath;

-----------------------------------------------------------------Bracket Notation //second way to access a key’s value is by using bracket notation, [ ]

let spaceship = {
  'Fuel Type' : 'Turbo Fuel',
  'Active Mission' : true,
  homePlanet : 'Earth', 
  numCrew: 5
 };

let propName =  'Active Mission';

// Write your code below
//Let’s use bracket notation to access the value of 'Active Mission' from the spaceship object in the code editor. Create a variable isActive and assign the spaceship‘s 'Active Mission' property to it.
let isActive = spaceship['Active Mission']
//Using bracket notation and the propName variable provided, console.log() the value of the 'Active Mission' property.
console.log(spaceship['Active Mission'])




---------------------------------------------------------------let retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.';

// Write your code below
//Below the retreatMessage variable in the code editor, create an alienShip object. It should contain a method .retreat() which will console.log() the retreatMessage.
let alienShip = {
  retreat() {
    console.log(retreatMessage)
  },
  //Add another method to your object literal. This method, .takeOff(), should console.log() the string 'Spim... Borp... Glix... Blastoff!'.
  takeOff() {
    console.log('Spim... Borp... Glix... Blastoff!')
  }
};
//Invoke your two methods: first .retreat() then .takeOff().
alienShip.retreat();

alienShip.takeOff();





---------------------------------------------------------------Nested Objects



let spaceship = {
  passengers: [{name: 'Space Dog'}], 
  telescope: {
    yearBuilt: 2018,
    model: "91031-XLT",
    focalLength: 2032 
  },
  crew: {
    captain: { 
      name: 'Sandra', 
      degree: 'Computer Engineering', 
      encourageTeam() { console.log('We got this!') },
     'favorite foods': ['cookies', 'cakes', 'candy', 'spinach'] }
  },
  engine: {
    model: "Nimbus2000"
  },
  nanoelectronics: {
    computer: {
      terabytes: 100,
      monitors: "HD"
    },
    'back-up': {
      battery: "Lithium",
      terabytes: 50
    }
  }
}; 
//Create a variable capFave and assign the captain‘s favorite food (the 
element in the 0th index of her 'favorite foods' array) to it. Make sure 
to use bracket and dot notation to get the value of the food through nested 
access (don’t just copy the value into the variable!)spaceship.crew.captain['favorite foods'] 
will give us access to the array of the captain‘s favorite foods, but there’s one additional 
step to get the first item in that array.
let capFave = spaceship.crew.captain['favorite foods'][0];
//Right now the passengers property has a value of null. Instead, assign as its value an 
array of objects. These objects should represent the spaceship‘s passengers as individual objects.
Make at least one passenger object in the array that has at least one key-value pair on it.
let firstPassenger = spaceship.passengers[0];
//Create a variable firstPassenger and assign the first passenger as its value (the element in the
0th index of the spaceship.passengers array you just made). Make sure to use bracket and dot notation
to get the passenger object through nested access (don’t just copy the object into the variable!)






---------------------------------------------------------------------------------------Pass by reference




let spaceship = {
  'Fuel Type' : 'Turbo Fuel',
  homePlanet : 'Earth'
};

// Write your code below
//Write a function greenEnergy() that has an object as a parameter and sets that object’s 'Fuel Type' property to 'avocado oil'.
let greenEnergy = obj => {
  obj['Fuel Type'] = 'avocado oil';
}
//Write a function remotelyDisable() that has an object as a parameter and sets (or reassigns) that object’s disabled property to true.
let remotelyDisable = obj => {
  obj.disabled = true;
}


//call your two functions with the spaceship object in the code editor, then console.log() the spaceship object to confirm those properties were changed/added.

greenEnergy(spaceship);

remotelyDisable(spaceship);

console.log(spaceship)
